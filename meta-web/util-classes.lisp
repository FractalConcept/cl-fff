(in-package "META-WEB")

(defun create-util-classes (store)
  (dolist (class '(source-file test))
     (meta::create-class-table store (find-class class))))


(prog1 (defclass source-file
                 nil
                 ((name :value-type string :user-name (make-instance 'meta-level:translated-string :en "Name" :fr "Nom" :de "" :sp "" :it "") :description "" :object-help (make-instance 'meta-level::object-help :en "" :fr "" :de "" :sp "" :it "" :en-h "" :fr-h "" :de-h "" :sp-h "" :it-h "") :choices (list) :visible t :visible-groups 'nil :modifiable t :modifiable-groups 'nil :stored t :in-proxy nil :indexed nil :unique nil :null-allowed t :list-of-values nil :new-objects-first nil :linked-value nil :modifiable t :duplicate-value t :make-copy-string nil :get-value-title (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :get-value-text (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :sql-length 0 :value-to-string-fn nil :nb-decimals 0 :void-link-text (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :can-create-new-object nil :create-new-object nil :get-value-sql "" :html-tag-attributes 'nil :dont-display-null-value nil :view-type :default)
                  (description :value-type string :user-name (make-instance 'meta-level:translated-string :en "Description" :fr "Description" :de "" :sp "" :it "") :description "" :object-help (make-instance 'meta-level::object-help :en "" :fr "" :de "" :sp "" :it "" :en-h "" :fr-h "" :de-h "" :sp-h "" :it-h "") :choices (list) :visible t :visible-groups 'nil :modifiable t :modifiable-groups 'nil :stored t :in-proxy nil :indexed nil :unique nil :null-allowed t :list-of-values nil :new-objects-first nil :linked-value nil :modifiable t :duplicate-value t :make-copy-string nil :get-value-title (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :get-value-text (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :sql-length 0 :value-to-string-fn nil :nb-decimals 0 :void-link-text (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :can-create-new-object nil :create-new-object nil :get-value-sql "" :html-tag-attributes '(:rows "10") :dont-display-null-value nil :view-type :medit)
                  (file-pathname :value-type string :user-name (make-instance 'meta-level:translated-string :en "Pathname" :fr "Pathname" :de "" :sp "" :it "") :description "" :object-help (make-instance 'meta-level::object-help :en "" :fr "" :de "" :sp "" :it "" :en-h "" :fr-h "" :de-h "" :sp-h "" :it-h "") :choices (list) :visible t :visible-groups 'nil :modifiable t :modifiable-groups 'nil :stored t :in-proxy nil :indexed nil :unique nil :null-allowed t :list-of-values nil :new-objects-first nil :linked-value nil :modifiable t :duplicate-value t :make-copy-string nil :get-value-title (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :get-value-text (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :sql-length 0 :value-to-string-fn nil :nb-decimals 0 :void-link-text (make-instance 'meta-level:translated-string :en "" :fr "" :de "" :sp "" :it "") :can-create-new-object nil :create-new-object nil :get-value-sql "" :html-tag-attributes 'nil :dont-display-null-value nil :view-type :default))
                 (:user-name (make-instance 'meta-level:translated-string :en "source file" :fr "fichier source" :de "" :sp "" :it "") :guid 13849674944659178753520734794 :object-help (make-instance 'meta-level::object-help :en "" :fr "" :de "" :sp "" :it "" :en-h "" :fr-h "" :de-h "" :sp-h "" :it-h "") :functions (list) :visible t :visible-groups 'nil :instanciable t :short-description 'name)))

(prog1 (defclass test nil nil (:user-name (make-instance 'meta-level:translated-string :en "Test" :fr "Test" :de "" :sp "" :it "") :guid 54592917637391414033769107868 :object-help (make-instance 'meta-level::object-help :en "" :fr "" :de "" :sp "" :it "" :en-h "" :fr-h "" :de-h "" :sp-h "" :it-h "") :functions (list) :visible t :visible-groups 'nil :instanciable t)))

