(in-package "META-WEB")

(defvar *meta-classes-list* '(sql-list-slot-desc values-table item-value translated-string object-help choice-value slot-info view-info function-info class-info user-group sql-list-info class-group project sql-list-sort-item meta-app))

(defun create-meta-classes (store)
  (dolist (class *meta-classes-list*)
     (meta::create-class-table store (find-class class))))

(prog1 (defclass named-object-mixin nil ((name :accessor name :value-type string :user-name (make-instance 'meta-level:translated-string :en "internal name" :fr "nom informatique") :object-help (make-instance 'meta-level::object-help :en "the internal name of the object" :fr "le nom informatique de l'objet") :initarg :name :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (user-name :accessor user-name :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "name for the user " :fr "nom pour l'utilisateur") :initform (make-instance 'translated-string) :object-help (make-instance 'meta-level::object-help :en "the name for the user" :fr "le nom pour l'utilisateur ") :initarg :user-name :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val) (description :accessor description :value-type string :user-name (make-instance 'meta-level:translated-string :en "description" :fr "description") :initarg :description :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit) (comment :value-type string :user-name (make-instance 'meta-level:translated-string :en "comment" :fr "commentaire") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)) (:user-name (make-instance 'meta-level:translated-string :en "named object" :fr "objet avec un nom") :guid 100 :visible nil :instanciable nil)))

(prog1 (defclass visibility-mixin nil ((visible :accessor visible :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "visible by all" :fr "visible par tous") :initform t :initarg :visible :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (visible-groups :accessor visible-groups :value-type user-group :user-name (make-instance 'meta-level:translated-string :en "visible by these groups" :fr "visible par ces groupes") :initarg :visible-groups :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-user-groups :get-value-sql "" :view-type :pick-mval)) (:user-name (make-instance 'meta-level:translated-string :en "visible mixin" :fr "mixin visible") :guid 101 :visible nil :instanciable nil)))

(prog1 (defclass modifiability-mixin nil ((modifiable :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "modifiable by all" :fr "modifiable par tous") :initform t :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (modifiable-groups :accessor modifiable-groups :value-type user-group :user-name (make-instance 'meta-level:translated-string :en "modifiable by these groups" :fr "modifiable par ces groupes") :initarg :modifiable-groups :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-user-groups :get-value-sql "" :view-type :pick-mval) (can-delete :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "removable if modifiable" :fr "suppression si modifiable") :initform t :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (can-delete-groups :value-type user-group :user-name (make-instance 'meta-level:translated-string :en "removable by this groups" :fr "suppression par ces groupes") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-modif-groups :get-value-sql "" :view-type :pick-mval)) (:user-name (make-instance 'meta-level:translated-string :en "modification mixin" :fr "mixin pour les modification") :guid 102 :visible nil :instanciable nil)))

(prog1 (defclass sql-list-slot-desc (named-object-mixin visibility-mixin) ((slot-info :value-type slot-info :user-name (make-instance 'meta-level:translated-string :en "attribute" :fr "attribut") :choices (list) :visible t :modifiable t :list-of-values t :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-object-slot :get-value-sql "" :view-type :default) (show :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "show in table" :fr "afficher dans la table") :initform t :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (css-style :value-type string :user-name (make-instance 'meta-level:translated-string :en "CSS style" :fr "style CSS") :initform "ListC" :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (html-source :value-type string :user-name (make-instance 'meta-level:translated-string :en "HTML source" :fr "source HTML") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)) (:user-name (make-instance 'meta-level:translated-string :en "attribute" :fr "attribut") :guid 103)))

(prog1 (defclass values-table nil ((name :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "name" :fr "nom") :initform (make-instance 'translated-string) :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val) (description :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "description" :fr "description") :initform (make-instance 'translated-string) :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val) (list-of-values :value-type item-value :user-name (make-instance 'meta-level:translated-string :en "list of values" :fr "liste des valeurs") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "table of values" :fr "table de valeurs") :guid 104 :short-description 'name)))

(prog1 (defclass item-value nil ((enum-value :value-type string :user-name (make-instance 'meta-level:translated-string :en "value" :fr "valeur") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (name :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "name" :fr "nom") :initform (make-instance 'translated-string) :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val) (description :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "description" :fr "description") :initform (make-instance 'translated-string) :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "value" :fr "valeur") :guid 105 :short-description 'name)))

(prog1 (defclass translated-string nil ((english :value-type string :user-name (make-instance 'meta-level:translated-string :en "English" :fr "anglais") :initarg :en :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit) (french :value-type string :user-name (make-instance 'meta-level:translated-string :en "French" :fr "fran√ßais") :initarg :fr :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (german :accessor german :value-type string :user-name (make-instance 'meta-level:translated-string :en "German" :fr "allemand") :initarg :de :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (spanish :accessor spanish :value-type string :user-name (make-instance 'meta-level:translated-string :en "Spanish" :fr "espagnol") :initarg :sp :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (italian :accessor italian :value-type string :user-name (make-instance 'meta-level:translated-string :en "Italian" :fr "italien") :initarg :it :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "translation" :fr "traduction") :guid 106)))

(prog1
    (defclass object-help
              nil
              ((english-tooltip :accessor english-tooltip :value-type string :user-name (make-instance 'meta-level:translated-string :en "English tooltip" :fr "English tooltip") :initarg :en :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (english-help :accessor english-help :value-type string :user-name (make-instance 'meta-level:translated-string :en "English Help" :fr "Aide en anglais") :initarg :en-h :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (french-tooltip :accessor french-tooltip :value-type string :user-name (make-instance 'meta-level:translated-string :en "French tooltip" :fr "French tooltip") :initarg :fr :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (french-help :accessor french-help :value-type string :user-name (make-instance 'meta-level:translated-string :en "French Help" :fr "Aide en fran√ßais") :initarg :fr-h :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (german-tooltip :accessor german-tooltip :value-type string :user-name (make-instance 'meta-level:translated-string :en "German tooltip" :fr "German tooltip") :initarg :de :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (german-help :accessor german-help :value-type string :user-name (make-instance 'meta-level:translated-string :en "German Help" :fr "Aide en allemand") :initarg :de-h :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (spanish-tooltip :accessor spanish-tooltip :value-type string :user-name (make-instance 'meta-level:translated-string :en "Spanish tooltip" :fr "Spanish tooltip") :initarg :sp :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (spanish-help :accessor spanish-help :value-type string :user-name (make-instance 'meta-level:translated-string :en "Spanish help" :fr "Aide en espagnol") :initarg :sp-h :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (italian-tooltip :accessor italian-tooltip :value-type string :user-name (make-instance 'meta-level:translated-string :en "Italian-tooltip" :fr "italian tooltip") :initarg :it :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (italian-help :accessor italian-help :value-type string :user-name (make-instance 'meta-level:translated-string :en "Italian help" :fr "Aide en italien") :initarg :it-h :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit))
              (:user-name (make-instance 'meta-level:translated-string :en "help text" :fr "texte d'aide") :guid 107)))

(prog1 (defclass choice-value nil ((choice-value :accessor choice-value :value-type string :user-name (make-instance 'meta-level:translated-string :en "value" :fr "valeur") :initarg :value :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (name :accessor name :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "user name" :fr "nom utilisateur") :initform (make-instance 'translated-string) :initarg :name :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed) (description :accessor description :value-type string :user-name (make-instance 'meta-level:translated-string :en "description" :fr "description") :initarg :description :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "choice value" :fr "valeur de choix") :guid 108)))

(prog1
    (defclass slot-info
              (named-object-mixin visibility-mixin modifiability-mixin ui-param-mixin)
              ((other-type :value-type string :user-name (make-instance 'meta-level:translated-string :en "name of other type" :fr "nom de l'autre type") :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not (eq value-type :other)) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (sql-name :accessor sql-name :value-type string :user-name (make-instance 'meta-level:translated-string :en "sql name" :fr "nom sql") :initform 'nil :initarg :sql-name :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (object-help :accessor object-help :value-type object-help :user-name (make-instance 'meta-level:translated-string :en "help description" :fr "description aide") :initform (make-instance 'object-help) :initarg :object-help :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :link)
               (stored :accessor stored :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "stored in database" :fr "enregistr√© dans la base") :initform t :initarg :stored :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (in-proxy :accessor in-proxy :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "in proxy" :fr "dans proxy") :initarg :in-proxy :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (indexed :accessor indexed :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "indexed" :fr "index√©") :initarg :indexed :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (unique-p :accessor unique :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "unique" :fr "unique") :initarg :unique :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (null-allowed :accessor null-allowed :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "null allowed" :fr "nul autoris√©") :initform t :initarg :null-allowed :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (accessor :accessor accessor :value-type string :user-name (make-instance 'meta-level:translated-string :en "accessor" :fr "accesseur") :initform 'nil :initarg :vaccessor :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (initarg :accessor initarg :value-type string :user-name (make-instance 'meta-level:translated-string :en "initarg" :fr "initarg") :initform 'nil :initarg :initarg :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (initform :accessor initform :value-type string :user-name (make-instance 'meta-level:translated-string :en "default value" :fr "valeur par defaut") :initform 'nil :initarg :initform :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (choices :accessor choices :value-type choice-value :user-name (make-instance 'meta-level:translated-string :en "possible choices" :fr "choix possibles") :initarg :choices :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :list-val)
               (list-of-values :accessor list-of-values :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "list of values" :fr "liste de valeurs") :initarg :list-of-values :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (value-type :accessor value-type :value-type symbol :user-name (make-instance 'meta-level:translated-string :en "value type" :fr "type de valeur") :initform :string :initarg :value-type :choices (list (list :string (make-instance 'meta-level:translated-string :en "string" :fr "cha√Æne de carat√®res")) (list :boolean (make-instance 'meta-level:translated-string :en "boolean" :fr "bool√©en")) (list :object (make-instance 'meta-level:translated-string :en "object" :fr "objet")) (list :integer (make-instance 'meta-level:translated-string :en "integer number" :fr "nombre entier")) (list :float (make-instance 'meta-level:translated-string :en "float" :fr "nombre √† virgule")) (list :utime (make-instance 'meta-level:translated-string :en "universal time" :fr "temps universel")) (list :date (make-instance 'meta-level:translated-string :en "date" :fr "date")) (list :symbol (make-instance 'meta-level:translated-string :en "symbol" :fr "symbole")) (list :ip-address (make-instance 'meta-level:translated-string :en "IP address" :fr "adresse IP")) (list :time-of-day (make-instance 'meta-level:translated-string :en "time of day" :fr "heure")) (list :decimal (make-instance 'meta-level:translated-string :en "decimal" :fr "nombre √† virgule fixe")) (list :timestamp (make-instance 'meta-level:translated-string :en ":timestamp" :fr ":timestamp")) (list :other (make-instance 'meta-level:translated-string :en "other type" :fr "autre type")) (list :color (make-instance 'meta-level:translated-string :en "color" :fr "couleur"))) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (object-type :accessor object-type :value-type class-info :user-name (make-instance 'meta-level:translated-string :en "object type" :fr "type d'objet") :initarg :object-type :choices (list) :visible t :modifiable t :linked-value t :modifiable t :get-value-html-fn 'interface::std-pick-treeview-html-fn :get-value-title (make-instance 'meta-level:translated-string :en "Choose an object class" :fr "Choisissez une classe d'object") :disable-predicate '(not (eq value-type :object)) :sql-length 0 :nb-decimals 0 :void-link-text (make-instance 'meta-level:translated-string :en "not defined" :fr "non d√©fini") :get-object-func 'get-project-classes-tree :get-value-sql "" :view-type :default)
               (linked-value :accessor linked-value :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "independant object linked" :fr "objet ind√©pendant li√©") :initarg :linked-value :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not (eq value-type :object)) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (unit :accessor unit :value-type string :user-name (make-instance 'meta-level:translated-string :en "unit" :fr "unit√©") :initform 'nil :initarg :unit :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (disable-predicate :accessor disable-predicate :value-type string :user-name (make-instance 'meta-level:translated-string :en "disable predicate" :fr "predicat \"disable\"") :initform 'nil :initarg :disable-predicate :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (value-constraint :accessor value-constraint :value-type string :user-name (make-instance 'meta-level:translated-string :en "value constraint" :fr "contrainte pour la valeur") :initform 'nil :initarg :value-constraint :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (sql-length :accessor sql-length :value-type integer :user-name (make-instance 'meta-level:translated-string :en "sql length" :fr "longueur sql") :initform 0 :initarg :sql-length :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (value-to-string-func :accessor value-to-string-func :value-type string :user-name (make-instance 'meta-level:translated-string :en "value to string function" :fr "fonction valeur -> string") :initarg :value-to-string-func :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (string-to-value-func :accessor string-to-value-func :value-type string :user-name (make-instance 'meta-level:translated-string :en "string to value function" :fr "fonction string -> valeur") :initform 'nil :initarg :string-to-value-func :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (value-to-sql-func :accessor value-to-sql-func :value-type string :user-name (make-instance 'meta-level:translated-string :en "value to sql function" :fr "fonction valeur -> sql") :initform 'nil :initarg :value-to-sql-func :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (sql-to-value-func :accessor sql-to-value-func :value-type string :user-name (make-instance 'meta-level:translated-string :en "sql to value function" :fr "fonction sql -> valeur") :initform 'nil :initarg :sql-to-value-func :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (nb-decimals :accessor nb-decimals :value-type integer :user-name (make-instance 'meta-level:translated-string :en "number of decimals" :fr "nombre de d√©cimales") :initform 0 :initarg :nb-decimals :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not (eq value-type :decimal)) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (void-link-text :accessor void-link-text :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "text when no object" :fr "texte quand pas d'objet") :initform (make-instance 'translated-string) :initarg :void-link-text :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not (eq value-type :object)) :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val)
               (pathname-filter :accessor pathname-filter :value-type string :user-name (make-instance 'meta-level:translated-string :en "pathname filter" :fr "filtre fichiers") :initform 'nil :initarg :pathname-filter :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (can-create-new-object :accessor can-create-new-object :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "can create a new object" :fr "peut cr√©er un nouvel objet") :initarg :can-create-new-object :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not (eq value-type :object)) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (create-new-object :accessor create-new-object :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "create attribute object " :fr "cr√©er objet attribut") :initarg :create-new-object :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not (eq value-type :object)) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (new-objects-first :accessor new-objects-first :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "new objects first" :fr "nouveaux objets en premier") :initarg :new-objects-first :choices (list) :visible t :modifiable t :modifiable t :disable-predicate '(not list-of-values) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (dont-display-null-value :accessor dont-display-null-value :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "don't display null values" :fr "ne pas afficher les valeurs nulle") :initarg :dont-display-null-value :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (view-type :accessor
                          view-type
                          :value-type
                          symbol
                          :user-name
                          (make-instance 'meta-level:translated-string :en "view type" :fr "type de vue")
                          :initform
                          :default
                          :initarg
                          :view-type
                          :choices
                          (list (list :named-slot-view (make-instance 'meta-level:translated-string :en "Specify slot view" :fr "Sp√©cifier vue slot")) (list :edit (make-instance 'meta-level:translated-string :en "single line edit" :fr "edit simple sur 1 ligne")) (list :password (make-instance 'meta-level:translated-string :en "password edit" :fr "edit password")) (list :pick-color (make-instance 'meta-level:translated-string :en "color choice popup" :fr "popup choix couleur")) (list :pick-mval (make-instance 'meta-level:translated-string :en "multiple choice popup" :fr "popup choix multiple")) (list :pick-val (make-instance 'meta-level:translated-string :en "pick value popup" :fr "popup choix  valeur")) (list :default (make-instance 'meta-level:translated-string :en "automatic" :fr "automatique")) (list :medit (make-instance 'meta-level:translated-string :en "multiline edit" :fr "multiline edit")) (list :list (make-instance 'meta-level:translated-string :en "list" :fr "liste")) (list :list-val (make-instance 'meta-level:translated-string :en "list (value)" :fr "liste (valeur)")) (list :list2 (make-instance 'meta-level:translated-string :en "liste 2 colonnes" :fr "liste 2 colonnes")) (list :list2-val (make-instance 'meta-level:translated-string :en "liste 2 col (valeur)" :fr "liste 2 col (valeur)")) (list :link (make-instance 'meta-level:translated-string :en "link" :fr "lien")) (list :embed (make-instance 'meta-level:translated-string :en "vue insert" :fr "ins√©rer vue")) (list :embed-val (make-instance 'meta-level:translated-string :en "ins√©rer vue (valeur)" :fr "ins√©rer vue (valeur)")) (list :on-off (make-instance 'meta-level:translated-string :en "insert  vue (on/off)" :fr "ins√©rer vue (on/off)")))
                          :visible
                          t
                          :modifiable
                          t
                          :modifiable
                          t
                          :sql-length
                          0
                          :nb-decimals
                          0
                          :get-object-func
                          'get-view-types
                          :get-value-sql
                          ""
                          :view-type
                          :default)
               (slot-view-name :value-type string :user-name (make-instance 'meta-level:translated-string :en "Slot view widget name" :fr "Slot view widget name") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :disable-predicate '(not (eq view-type :named-slot-view)) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (duplicate-value-fn :value-type string :user-name (make-instance 'meta-level:translated-string :en "function to duplicate value" :fr "fonction pour dupliquer la valeur") :initform 'nil :description "set to t if this slot must be deep copied when the object is duplicated" :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (make-copy-string :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "add <copy> to value" :fr "ajouter <copy> √† la valeur") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (choices-table :value-type values-table :user-name (make-instance 'meta-level:translated-string :en "table of values" :fr "table de valeurs") :choices (list) :visible t :modifiable t :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-project-values-tables :get-value-sql "" :view-type :default)
               (duplicate-value :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "duplicate value" :fr "dupliquer valeur") :initform t :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (list-format :value-type string :user-name (make-instance 'meta-level:translated-string :en "name of the list format" :fr "Nom du format de la liste") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :disable-predicate '(not list-of-values) :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (enable-copy-paste :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "Enable copy/paste" :fr "Autorise les copier/coller") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default))
              (:user-name (make-instance 'meta-level:translated-string :en "attribute (slot)" :fr "attribut (slot)") :guid 109)))

(prog1 (defclass view-info (named-object-mixin) ((country-languages :value-type symbol :user-name (make-instance 'meta-level:translated-string :en "languages" :fr "langues") :choices (list (list :en (make-instance 'meta-level:translated-string :en "English" :fr "Anglais")) (list :fr (make-instance 'meta-level:translated-string :en "French" :fr "Fran√ßais")) (list :de (make-instance 'meta-level:translated-string :en "German" :fr "Allemand")) (list :it (make-instance 'meta-level:translated-string :en "Italian" :fr "Italien")) (list :sp (make-instance 'meta-level:translated-string :en "Spanish" :fr "Espagnol"))) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :pick-mval) (groups :value-type user-group :user-name (make-instance 'meta-level:translated-string :en "groups" :fr "groupes") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-user-groups :get-value-sql "" :view-type :list-val) (source-code :value-type string :user-name (make-instance 'meta-level:translated-string :en "source code" :fr "code source") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit) (special-view :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "special view" :fr "vue sp√©ciale") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "view" :fr "vue") :guid 110)))

(prog1 (defclass function-info (named-object-mixin visibility-mixin ui-param-mixin) ((disable-predicate :value-type string :user-name (make-instance 'meta-level:translated-string :en "disable predicate" :fr "predicat \"disable\"") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit) (object-help :accessor object-help :value-type object-help :user-name (make-instance 'meta-level:translated-string :en "object help" :fr "description aide") :initform (make-instance 'object-help) :initarg :help :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :link)) (:user-name (make-instance 'meta-level:translated-string :en "function" :fr "fonction") :guid 111)))

(prog1
    (defclass class-info
              (named-object-mixin visibility-mixin)
              ((guid :accessor guid :value-type integer :user-name (make-instance 'meta-level:translated-string :en "class GUID" :fr "class GUID") :initform (incf (last-class-guid (meta-level::parent (meta-level::parent *object*)))) :initarg :guid :choices (list) :visible t :modifiable t :modifiable t :duplicate-value nil :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :default)
               (class-status :value-type symbol :user-name (make-instance 'meta-level:translated-string :en "progress status" :fr "√©tat d'avancement") :initform :void :description "√©tat d'avancement dans la r√©alisation de la classe" :initarg :class-status :choices (list (list :verified (make-instance 'meta-level:translated-string :en "verified" :fr "v√©rifi√©")) (list :to-verifiy (make-instance 'meta-level:translated-string :en "to verify" :fr "√† v√©rifier")) (list :75% (make-instance 'meta-level:translated-string :en "75% done" :fr "avancement 75%")) (list :50% (make-instance 'meta-level:translated-string :en "50% done" :fr "avancement 50% ")) (list :25% (make-instance 'meta-level:translated-string :en "25% done" :fr "avancement 25%")) (list :void (make-instance 'meta-level:translated-string :en "empty class" :fr "classe vide"))) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (direct-superclasses :accessor direct-superclasses :value-type class-info :user-name (make-instance 'meta-level:translated-string :en "super classes" :fr "super classes") :initarg :direct-superclasses :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :linked-value t :modifiable t :get-value-title (make-instance 'meta-level:translated-string :en "Choose an object class" :fr "Choisissez une classe d'object") :sql-length 0 :nb-decimals 0 :get-object-func 'get-project-classes :get-value-sql "" :view-type :list-val)
               (sql-name :accessor sql-name :value-type string :user-name (make-instance 'meta-level:translated-string :en "sql name" :fr "nom SQL") :initarg :sql-name :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (object-help :accessor object-help :value-type object-help :user-name (make-instance 'meta-level:translated-string :en "object help description" :fr "description de l'aide") :initform (make-instance 'object-help) :initarg :help :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :link)
               (version :accessor version :value-type integer :user-name (make-instance 'meta-level:translated-string :en "version" :fr "version") :initform (version (project meta-level::*parent-of-root-object-initialized*)) :initarg :version :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (instanciable :accessor instanciable :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "instanciable" :fr "instanciable") :initform t :initarg :instanciable :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (use-memory-store :accessor use-memory-store :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "use memory store" :fr "en m√©moire temporaire") :initarg :use-memory-store :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (short-description :accessor short-description :value-type string :user-name (make-instance 'meta-level:translated-string :en "short description" :fr "description courte") :initform 'nil :initarg :short-description :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (direct-slots :accessor direct-slots :value-type slot-info :user-name (make-instance 'meta-level:translated-string :en "slots" :fr "slots") :initarg :slots :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (direct-views :accessor direct-views :value-type view-info :user-name (make-instance 'meta-level:translated-string :en "views" :fr "vues") :initarg :views :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (direct-functions :accessor direct-functions :value-type function-info :user-name (make-instance 'meta-level:translated-string :en "functions" :fr "fonctions") :initarg :functions :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (current-version :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "current version" :fr "version courante") :initform t :choices (list) :visible t :duplicate-value nil :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (previous-versions :value-type class-info :user-name (make-instance 'meta-level:translated-string :en "previous versions" :fr "versions pr√©c√©dentes") :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :duplicate-value nil :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (other-superclasses :value-type string :user-name (make-instance 'meta-level:translated-string :en "Other superclasses") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default))
              (:user-name
               (make-instance 'meta-level:translated-string :en "object class" :fr "classe d'objet")
               :guid
               112
               :functions
               (list (make-instance 'meta-level::fc-function :name 'drop-class-tables :user-name (make-instance 'meta-level:translated-string :en "remove the tables in the SQL database" :fr "enl√®ve les tables dans la base SQL") :get-value-sql "") (make-instance 'meta-level::fc-function :name 'create-class-tables :user-name (make-instance 'meta-level:translated-string :en "create the table in the SQL database" :fr "cr√©√©r la table dans la base SQL") :get-value-sql "") (make-instance 'meta-level::fc-function :name 'list-objects-in-db :user-name (make-instance 'meta-level:translated-string :en "list of objects in the SQL database" :fr "liste des objets dans la base SQL") :get-value-sql "") (make-instance 'meta-level::fc-function :name 'create-object-in-db :user-name (make-instance 'meta-level:translated-string :en "create an object in the SQL database" :fr "cr√©er un objet dans la base SQL") :get-value-sql "") (make-instance 'meta-level::fc-function :name 'make-upgrade-class-fn :user-name (make-instance 'meta-level:translated-string :en "Make upgrade function" :fr "G√©n√©rer fonction conversion") :visible t :get-value-sql "") (make-instance 'meta-level::fc-function :name 'make-new-class-version :user-name (make-instance 'meta-level:translated-string :en "Make new version" :fr "Cr√©er nouvelle version") :visible t :get-value-sql "") (make-instance 'meta-level::fc-function :name 'display-local-class-graph :user-name (make-instance 'meta-level:translated-string :en "Graph of class's neighborhood" :fr "Graphe des classes voisines") :visible t :get-value-sql "") (make-instance 'meta-level::fc-function :name 'view-class-source :user-name (make-instance 'meta-level:translated-string :en "View Lisp source" :fr "Voir source Lisp") :visible t :get-value-sql "") (make-instance 'meta-level::fc-function :name 'create-temp-object :user-name (make-instance 'meta-level:translated-string :en "Create a test object" :fr "Cr√©er un objet de test") :visible t :get-value-sql "")))))

(prog1 (defclass user-group (named-object-mixin) nil (:user-name (make-instance 'meta-level:translated-string :en "user group" :fr "groupe utilisateur") :guid 113)))

(prog1
    (defclass sql-list-info
              (named-object-mixin)
              ((object-class :value-type symbol :user-name (make-instance 'meta-level:translated-string :en "objects class" :fr "classe des objets") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (sql-query :value-type string :user-name (make-instance 'meta-level:translated-string :en "SQL query" :fr "requ√™te SQL") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (max-nb-rows :value-type integer :user-name (make-instance 'meta-level:translated-string :en "max number of rows" :fr "nombre max de lignes") :initform 50 :initarg :limit :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (object-slots :value-type sql-list-slot-desc :user-name (make-instance 'meta-level:translated-string :en "objects attributes" :fr "attributs des objets") :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-object-func 'get-object-slots :get-value-sql "" :view-type :default)
               (sort-order :value-type sql-list-sort-item :user-name (make-instance 'meta-level:translated-string :en "sort order" :fr "ordre de tri") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'create-sql-sort-item :get-value-sql "" :view-type :default)
               (css-style :value-type string :user-name (make-instance 'meta-level:translated-string :en "CSS style for the table" :fr "style CSS de la table") :initform "ListT" :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (use-2-row-styles :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "alternate row styles" :fr "alterner les styles des lignes") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (row1-css-style :value-type string :user-name (make-instance 'meta-level:translated-string :en "rows CSS style" :fr "style CSS des lignes") :initform "ListR1" :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (row2-css-style :value-type string :user-name (make-instance 'meta-level:translated-string :en "alternate rows CSS style" :fr "style CSS altern√© des lignes") :initform "ListR2" :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default))
              (:user-name (make-instance 'meta-level:translated-string :en "SQL list" :fr "liste SQL") :guid 114)))

(prog1 (defclass class-group (named-object-mixin) ((sources-directory :value-type string :user-name (make-instance 'meta-level:translated-string :en "sources directory" :fr "r√©pertoire pour les sources") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (print-in-doc :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "Included in documentation" :fr "Inclus dans la documentation") :initform t :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default) (classes :accessor classes :value-type class-info :user-name (make-instance 'meta-level:translated-string :en "classes" :fr "classes") :initarg :classes :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "group of classes" :fr "groupe de classes") :guid 115 :functions (list (make-instance 'meta-level::fc-function :name 'gen-lisp-files :user-name (make-instance 'meta-level:translated-string :en "Generate the Lisp files" :fr "G√©n√©rer les fichiers Lisp") :visible t :get-value-sql "") (make-instance 'meta-level::fc-function :name 'view-group-classes-source :user-name (make-instance 'meta-level:translated-string :en "View Lisp source" :fr "Voir source Lisp") :visible t :get-value-sql "") (make-instance 'meta-level::fc-function :name 'class-group-graph :user-name (make-instance 'meta-level:translated-string :en "Graph of the group's classes" :fr "Graphe des classes du groupe") :visible t :get-value-sql "")))))

(prog1
    (defclass project
              nil
              ((name :accessor name :value-type string :user-name (make-instance 'meta-level:translated-string :en "name" :fr "nom") :initform "" :initarg :name :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (project-package :accessor project-package :value-type string :user-name (make-instance 'meta-level:translated-string :en "project package" :fr "package du projet") :initform "" :initarg :package :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (description :accessor description :value-type string :user-name (make-instance 'meta-level:translated-string :en "description" :fr "description") :initarg :description :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :medit)
               (version :value-type integer :user-name (make-instance 'meta-level:translated-string :en "Database version " :fr "Version de la base de donn√©es") :initform 0 :choices (list) :visible t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (sources-directory :value-type string :user-name (make-instance 'meta-level:translated-string :en "sources directory" :fr "r√©pertoire pour les sources") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (database :value-type string :user-name (make-instance 'meta-level:translated-string :en "database name" :fr "nom de la base de donn√©es") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (application-ip :value-type string :user-name (make-instance 'meta-level:translated-string :en "Lisp application IP address" :fr "Adresse IP de l'application Lisp") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (application-port :value-type integer :user-name (make-instance 'meta-level:translated-string :en "Lisp application IP port" :fr "Port IP de l'application Lisp") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (class-groups :accessor class-groups :value-type class-group :user-name (make-instance 'meta-level:translated-string :en "groups of classes " :fr "groupes de classes") :initarg :classe-groups :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (user-groups :accessor user-groups :value-type user-group :user-name (make-instance 'meta-level:translated-string :en "user groups" :fr "groupes d'utilisateurs") :initarg :classes :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (sql-lists :accessor sql-lists :value-type sql-list-info :user-name (make-instance 'meta-level:translated-string :en "SQL lists" :fr "listes SQL") :initarg :sql-lists :choices (list) :visible t :modifiable t :list-of-values t :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (values-tables :value-type values-table :user-name (make-instance 'meta-level:translated-string :en "tables of values" :fr "tables de valeurs") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (db-connection :value-type t :user-name (make-instance 'meta-level:translated-string :en "database  conection" :fr "connexion base de donn√©es") :choices (list) :stored nil :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (store :value-type t :user-name (make-instance 'meta-level:translated-string :en "project store" :fr "store du projet") :choices (list) :stored nil :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (print-source-files :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "Print source files in doc" :fr "Imprimer les fichiers sources dans la doc") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (files :value-type source-file :user-name (make-instance 'meta-level:translated-string :en "Source files" :fr "Fichiers sources") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (used-lisp-modules :value-type string :user-name (make-instance 'meta-level:translated-string :en "Used Lisp modules" :fr "Modules Lisp utilis√©s") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (asdf-directives :value-type string :user-name (make-instance 'meta-level:translated-string :en "ADSF directives" :fr "ADSF directives") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :html-tag-attributes '(:rows "5" :colums "100") :view-type :medit)
               (other-documents :value-type other-document :user-name (make-instance 'meta-level:translated-string :en "Other documents" :fr "Documents annexes") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)
               (project-version :value-type string :user-name (make-instance 'meta-level:translated-string :en "Project version" :fr "Version du projet") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (version-date :value-type meta-level::date :user-name (make-instance 'meta-level:translated-string :en "Version date" :fr "Date de la version") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (last-class-guid :value-type integer :user-name (make-instance 'meta-level:translated-string :en "Last class guid" :fr "Dernier class guid") :initarg :|100| :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default))
              (:user-name
               (make-instance 'meta-level:translated-string :en "project" :fr "projet")
               :guid
               116
               :functions
               (list (make-instance 'meta-level::fc-function :name 'reload-application :user-name (make-instance 'meta-level:translated-string :en "Reload application" :fr "Recharger l'application") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'gen-asdf-file :user-name (make-instance 'meta-level:translated-string :en "Generate ASDF file" :fr "G√©n√©rer fichier ASDF") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'gen-doc :user-name (make-instance 'meta-level:translated-string :en "Generate the documentation" :fr "G√©n√©rer la documentation") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'gen-lisp-files :user-name (make-instance 'meta-level:translated-string :en "Generate the Lisp files" :fr "G√©n√©rer les fichiers Lisp") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'make-update-project-fn :user-name (make-instance 'meta-level:translated-string :en "Make database upgrade function" :fr "G√©n√©rer fonction conversion base de donn√©es") :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'make-new-project-version :user-name (make-instance 'meta-level:translated-string :en "Make a new version" :fr "Cr√©er nouvelle version") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'open-database :user-name (make-instance 'meta-level:translated-string :en "open database" :fr "ouvrir base de donn√©es") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'drop-database :user-name (make-instance 'meta-level:translated-string :en "drop database" :fr "d√©truire la base de don√©es") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'create-database :user-name (make-instance 'meta-level:translated-string :en "create database" :fr "cr√©er la base de donn√©es") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'project-class-graph :user-name (make-instance 'meta-level:translated-string :en "Graph of all classes" :fr "Graphe de toutes les classes") :visible t :get-value-sql "")
                     (make-instance 'meta-level::fc-function :name 'create-project-classes :user-name (make-instance 'meta-level:translated-string :en "Create all project classes" :fr "Cr√©er les classes du projet") :visible t :get-value-sql "")))))

(prog1 (defclass sql-list-sort-item nil ((slot-desc :value-type sql-list-slot-desc :user-name (make-instance 'meta-level:translated-string :en "attribute" :fr "attribut") :choices (list) :visible t :modifiable t :linked-value t :modifiable t :sql-length 0 :nb-decimals 0 :get-object-func 'get-sql-list-slot :get-value-sql "" :view-type :default) (ascending :value-type boolean :user-name (make-instance 'meta-level:translated-string :en "sort in increasing order" :fr "trier par ordre croissant") :initform t :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "sort item" :fr "√©l√©ment de tri") :guid 117)))

(prog1
    (defclass ui-param-mixin
              nil
              ((get-object-fn :accessor get-object-fn :value-type string :user-name (make-instance 'meta-level:translated-string :en "function to get object" :fr "fonction pour choix objet") :initform 'nil :initarg :get-object-fn :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (process-new-object-fn :value-type string :user-name (make-instance 'meta-level:translated-string :en "function to process the added object" :fr "fonction pour transformation de l'objet choisi") :choices (list) :visible t :modifiable t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (get-value-sql :value-type string :user-name (make-instance 'meta-level:translated-string :en "SQL for value choice" :fr "SQL pour choix valeurs") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :html-tag-attributes '(:rows "5") :view-type :medit)
               (get-value-text :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "text for choice interface" :fr "texte pour interface de choix") :initform (make-instance 'translated-string) :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val)
               (get-value-title :value-type translated-string :user-name (make-instance 'meta-level:translated-string :en "title for choice interface" :fr "titre pour interface de choix") :initform (make-instance 'translated-string) :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :create-new-object t :get-value-sql "" :view-type :embed-val)
               (get-value-html-fn :value-type string :user-name (make-instance 'meta-level:translated-string :en "html function to get object" :fr "fonction html pour choix objet") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default)
               (html-tag-attributes :value-type string :user-name (make-instance 'meta-level:translated-string :en "HTML tag attributes" :fr "attributs du tag HTML") :choices (list) :visible t :modifiable t :modifiable t :sql-length 0 :nb-decimals 0 :get-value-sql "" :view-type :default))
              (:user-name (make-instance 'meta-level:translated-string :en "UI parameters" :fr "param√®tres UI") :guid 118 :instanciable nil)))

(prog1 (defclass meta-app nil ((projects :value-type project :user-name (make-instance 'meta-level:translated-string :en "Projects" :fr "Projets") :choices (list) :visible t :modifiable t :list-of-values t :new-objects-first nil :modifiable t :sql-length 0 :nb-decimals 0 :can-create-new-object t :get-value-sql "" :view-type :default)) (:user-name (make-instance 'meta-level:translated-string :en "application administration" :fr "Administration de l'application") :guid 119)))

