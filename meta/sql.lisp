(in-package meta)

(defun compute-sql-type (slot)
  (if (subtypep (value-type slot) 'root-object)
    "BIGINT"
  (ecase (value-type slot)
    (boolean "BOOLEAN")
    (integer "INTEGER")
    (:ip-address "INET")
    (float   "FLOAT")
    (string   (if (and (sql-length slot)(> (sql-length slot) 1))
		(format nil "VARCHAR(~d)" (sql-length slot))
		"TEXT"))
    (pathname "TEXT")
    (:decimal "DECIMAL")
    (:date   "DATE")
    (:time-of-day "TIME")
    (:universal-time "TIMESTAMP")
    (:color "TEXT")
    (:timestamp "INTEGER")
    (symbol "TEXT")
    ((t) "TEXT"))))

(defun gen-sql-for-slot (slot stream)
  (write-string (sql-name slot) stream)
  (write-char #\Space stream)
  (write-string (compute-sql-type slot) stream)
  (unless (null-allowed slot) (write-string " NOT NULL" stream))
  (when (unique slot)
    (write-string " UNIQUE" stream)))

(defun gen-sql-create-table (class)
  (with-output-to-string (stream)
    (write-string "CREATE TABLE " stream)
    (write-string (sql-name class) stream)
    (write-line " (" stream)
    (write-line " id BIGINT NOT NULL PRIMARY KEY, parentid BIGINT" stream)
    (loop for slot in (class-slots class)
	  do (when (and (stored slot)(not (list-of-values slot)))
	       (write-line "," stream)
	       (gen-sql-for-slot slot stream)))
    (write-line ") WITHOUT OIDS" stream)))

(defun write-sql-slot-names-list (s class)
  (write-string "id,parentid" s)
  (loop for slot in (class-slots class)
	do (when (and (stored slot)(not (list-of-values slot)))
	     (write-string "," s)
	     (write-string (sql-name slot) s))))

(defun gen-sql-write-object (object)
  (let* ((class (class-of object))
	 (data-object (data-object object))
	 (stored-slots (loop for slot in (class-slots class)
			     when (and (stored slot)(not (list-of-values slot)))
			     collect slot)))
      (if (new-object object) 
	  (with-output-to-string (s)
	    (write-string "INSERT INTO " s)
	    (write-string (sql-name class) s)
	    (write-string " (" s)
	    (write-sql-slot-names-list s class)
	    (write-string ") VALUES (" s)
	    (format s "~d,~a" (id object)(if (parent object)(id (parent object)) "null"))
	    (loop for slot in stored-slots do 
		  (write-string "," s)
		  (funcall (value-to-sql-fn slot) (slot-value data-object (slot-definition-name slot)) s))
	    (write-string ")" s))
	  (when stored-slots
	    (with-output-to-string (s)
	      (write-string "UPDATE " s)
	      (write-string (sql-name class) s)
	      (write-string " SET " s)
	      (loop with first = t
		    for slot in stored-slots do 
		    (if first (setf first nil)(write-string "," s))
		    (write-string (sql-name slot) s)
		    (write-string "=" s)
		    (funcall (value-to-sql-fn slot) (slot-value data-object (slot-definition-name slot)) s))
	      (format s " WHERE id = ~d" (id object)))))))

(defun gen-sql-read-object (object)
  (let ((class (class-of object))
	(data-object (data-object object)))
    (with-output-to-string (s)
      (write-string "SELECT " s)
      (write-sql-slot-names-list s class)
      (write-string " FROM " s)
      (write-string (sql-name class) s)
      (format s " WHERE id = ~d" (id object)))))

(defun utime-to-sql-time (time &optional stream)
  (multiple-value-bind
	(sec min hour date month year day-of-week dsp tz)
      (decode-universal-time time)
      (declare (ignore tz dsp))
      (format stream
	      "'~2,'0d-~2,'0d-~d ~2,'0d:~2,'0d:~2,'0d'"
	      year month date hour min sec)))

(defun utime-to-sql-date (time &optional stream)
  (multiple-value-bind
	(sec min hour date month year day-of-week dsp tz)
      (decode-universal-time time)
      (declare (ignore tz dsp))
      (format stream "'~d-~2,'0d-~2,'0d'" year month date)))
